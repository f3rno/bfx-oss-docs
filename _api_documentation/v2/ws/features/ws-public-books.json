{
  "title": "Books",
  "id": "ws-public-books",
  "description": "The Order Books channel allows you to keep track of the state of the Bitfinex order book.\nIt is provided on a price aggregated basis with customizable precision.\nUpon connecting, you will receive a snapshot of the book\nfollowed by updates for any changes to the state of the book.",
  "elements": [
    {
      "type": "CODE",
      "content": {
        "codes": [
          {
            "code": "const ws = require('ws')\nconst w = new ws('wss://api-pub.bitfinex.com/ws/2')\n\nw.on('message', (msg) => console.log(msg))\n\nlet msg = JSON.stringify({ \n  event: 'subscribe', \n  channel: 'book', \n  symbol: 'tBTCUSD' \n})\n\nw.on('open', () => w.send(msg))",
            "language": "javascript"
          },
          {
            "code": "wscat -c wss://api-pub.bitfinex.com/ws/2\n{ \"event\": \"subscribe\", \"channel\": \"book\", \"symbol\": \"tBTCUSD\" }\n",
            "language": "shell"
          },
          {
            "code": "ws = websocket.WebSocketApp('wss://api-pub.bitfinex.com/ws/2')\n\nws.on_open = lambda self: self.send('{ \"event\": \"subscribe\", \"channel\": \"book\", \"symbol\": \"tBTCUSD\"}')\n\nws.on_message = lambda self, evt:  print (evt)",
            "language": "python"
          }
        ]
      }
    },
    {
      "type": "MARKDOWN",
      "content": ""
    },
    {
      "type": "CODE",
      "content": {
        "codes": [
          {
            "code": "// request\n{ \n  event: 'subscribe',\n  channel: 'book',\n  symbol: SYMBOL,\n  prec: PRECISION,\n  freq: FREQUENCY,\n  len: LENGTH \n}\n\n{\"event\":\"subscribed\",\"channel\":\"book\",\"chanId\":17082,\"symbol\":\"tBTCUSD\",\"prec\":\"P0\",\"freq\":\"F0\",\"len\":\"25\",\"pair\":\"BTCUSD\"}\n\n// response\n{ \n  event: 'subscribed',\n  channel: 'book',\n  chanId: CHANNEL_ID,\n  symbol: SYMBOL,\n  prec: PRECISION,\n  freq: FREQUENCY,\n  len: LENGTH \n}\n\n{\"event\":\"subscribed\",\"channel\":\"book\",\"chanId\":431549,\"symbol\":\"fUSD\",\"prec\":\"P0\",\"freq\":\"F0\",\"len\":\"25\",\"currency\":\"USD\"}",
            "language": "javascript",
            "name": "Request / Response"
          },
          {
            "code": "// on trading pairs (ex. tBTCUSD)\n[\n  CHANNEL_ID,\n  [\n    [\n      PRICE,\n      COUNT,\n      AMOUNT\n    ],\n    ...\n  ]\n]\n  \n[17082,[[7254.7,3,3.3]]]\n  \n// on funding currencies (ex. fUSD)\n[\n  CHANNEL_ID,\n  [\n    [\n      RATE,\n      PERIOD,\n      COUNT,\n      AMOUNT\n    ],\n    ...\n  ]\n]\n\n[431549,[[0.00023112,30,1,-15190.7005375]]]\n",
            "language": "javascript",
            "name": "Snapshot"
          },
          {
            "code": "// on trading pairs (ex. tBTCUSD)\n[\n  CHANNEL_ID,\n  [\n    PRICE,\n    COUNT,\n    AMOUNT\n  ]\n]\n\n[17082,[7254.5,0,1]]\n  \n// on funding currencies (ex. fUSD)\n[\n  CHANNEL_ID,\n  [\n    RATE,\n    PERIOD,\n    COUNT,\n    AMOUNT\n  ]\n]\n\n[348748,[0.00023157,2,1,66.35007188]]",
            "language": "javascript",
            "name": "Update"
          }
        ],
        "sidebar": true
      }
    },
    {
      "type": "MARKDOWN",
      "content": "**Request Fields**\n\nFields | Type | Description\n--- | --- | ---\nSYMBOL | String | Trading pair or funding currency\nPRECISION | string | Level of price aggregation (P0, P1, P2, P3, P4).<br>The default is P0\nFREQUENCY | string | Frequency of updates (F0, F1).<br>F0=realtime / F1=2sec.<br>The default is F0.\nLENGTH | string | Number of price points (\"25\", \"100\") [default=\"25\"]\n"
    },
    {
      "type": "MARKDOWN",
      "content": "** Stream Fields **\n\nFields | Type | Description\n--- | --- | ---\nCHANNEL_ID | int | Identification number assigned to the channel for the duration of this connection.\nPRICE | float | Price level\nRATE | float | Rate level\nPERIOD | float | Period level\nCOUNT | int | Number of orders at that price level (delete price level if count = 0)\nÂ±AMOUNT | float | Total amount available at that price level. Trading: if AMOUNT > 0 then bid else ask; Funding: if AMOUNT < 0 then bid else ask;\n"
    },
    {
      "type": "MARKDOWN",
      "content": "** Algorithm to create and keep a book instance updated **\n\n1. subscribe to channel\n2. receive the book snapshot and create your in-memory book structure\n3. when *count* > 0 then you have to add or update the price level\n3.1 if *amount* > 0 then add/update bids\n3.2 if *amount* < 0 then add/update asks\n4. when *count* = 0 then you have to delete the price level.\n4.1 if *amount* = 1 then remove from bids\n4.2 if *amount* = -1 then remove from asks\n\nNode.JS example gists:\n* Aggregated Book: https://gist.github.com/prdn/b8c067c758aab7fa3bf715101086b47c\n* Raw Book: https://gist.github.com/prdn/b9c9c24fb1bb38604dcd1e94ee89dd9e\n"
    },
    {
      "type": "MARKDOWN",
      "content": "**Precision Levels**\n* Significant Digits Calculations: https://support.bitfinex.com/hc/en-us/articles/115000371105-How-is-precision-calculated-using-Significant-Digits\n\nPrecision Level | Number of significant figures\n--- | ---\nP0 | 5\nP1 | 4\nP2 | 3\nP3 | 2\nP4 | 1\n"
    },
    {
      "type": "MARKDOWN",
      "content": "**Checksum**\nAn Order Book Checksum can be requested through the Websocket configuration. You can find out more [here](https://docs.bitfinex.com/docs/ws-general#section-configuration).\n"
    },
    {
      "type": "CALLOUT",
      "content": {
        "type": "warning",
        "title": "Error Codes",
        "body": "10011 : Unknown Book precision\n10012 : Unknown Book length"
      }
    }
  ]
}